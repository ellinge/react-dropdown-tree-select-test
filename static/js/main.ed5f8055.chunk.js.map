{"version":3,"sources":["BenchmarkRender.tsx","DropdownTestSection.tsx","EventLog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BenchmarkData","count","totalNodeCount","totalMs","clientIds","Map","BenchmarkRender","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","benchmarking","timeDevelop","timeDevelopTemp","benchmark","bind","assertThisInitialized","benchmarkComponent","_this$state","react_default","a","createElement","renderBenchmarkData","className","onClick","disabled","benchMark","branch","size","Component","setStatus","numberOfComponents","callback","renderDiv","document","before","performance","now","Promise","resolve","setTimeout","elem","React","data","renderedElem","ReactDOM","render","set","clientId","tree","unmountComponentAtNode","Math","floor","result","event","_this2","setState","console","log","length","DropdownTreeSelect","d1","DropdownTreeSelect117","d2","DropdownTestSection","_React$useState","useState","show","_React$useState2","slicedToArray","setShow","Type","target","header","description","dummyA","dummyB","children","hideDefaultCheckboxes","dataMulti","bigData","dataSingle","JSON","parse","stringify","push","unshift","sharedProps","texts","label","concat","id","href","assign","radioSelect","mode","simpleSelect","hierarchical","EventLog","_React$Component","clearLog","inherits","createClass","key","value","message","prevState","eventLog","Fragment","map","item","i","versionMap","type","DropdownTreeSelect104","App","activeVersionOnLoad","activeOnLoad","undefined","window","location","hash","match","exec","componentType","setComponentType","defaultDummyA","objectSpread","isDefaultValue","defaultDummyB","checkedDummyA","checked","checkedDummyB","eventLogRef","createRef","addToLog","eventName","eventData","current","dangerouslySetInnerHTML","__html","prettyPrint","CircularJSON","onChange","currentNode","selectedNodes","onNodeToggle","actions","title","customAction","onAction","action","node","actionsDummyA","grootNode","actionsDummyB","batmanNode","_ref","find","v","rel","htmlFor","DropdownTestSection_DropdownTestSection","EventLog_EventLog","ref","BenchmarkRender_BenchmarkRender","Boolean","hostname","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ed5f8055.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\r\nimport DropdownTreeSelect117 from \"react-dropdown-tree-select@1.17.0\";\r\nimport data from \"./data.json\";\r\n\r\nclass BenchmarkData {\r\n  public count: number = 0;\r\n  public totalNodeCount: number = 0;\r\n  public totalMs: number = 0;\r\n  public clientIds = new Map();\r\n}\r\n\r\ninterface BenchmarkState {\r\n  benchmarking: boolean;\r\n  timeDevelop: BenchmarkData;\r\n  timeDevelopTemp: BenchmarkData;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport default class BenchmarkRender extends React.Component<any, BenchmarkState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      benchmarking: false,\r\n      timeDevelop: new BenchmarkData(),\r\n      timeDevelopTemp: new BenchmarkData()\r\n    };\r\n    this.benchmark = this.benchmark.bind(this);\r\n    this.benchmarkComponent = this.benchmarkComponent.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    const { benchmarking, timeDevelop, timeDevelopTemp } = this.state;\r\n    return <div>\r\n      {this.renderBenchmarkData(timeDevelopTemp, \"developTemp\")}\r\n      {this.renderBenchmarkData(timeDevelop, \"v1.17\")}\r\n      <button className=\"button\" onClick={this.benchmark} disabled={benchmarking}>\r\n        {benchmarking ? \"Running...\" : \"Run benchmark\"}</button>\r\n    </div>;\r\n  }\r\n\r\n  private renderBenchmarkData(benchMark: BenchmarkData, branch: string) {\r\n    if (!benchMark || benchMark.count === 0) { return null; }\r\n    return <p className=\"message\">\r\n        Rendering <strong>{benchMark.count}</strong> DropdownTreeSelect ({branch}) took\r\n        <strong> {benchMark.totalMs} ms </strong>\r\n        (total nodes parsed: {benchMark.totalNodeCount}, total clientids generated: {benchMark.clientIds.size})\r\n      </p>;\r\n  }\r\n\r\n  private async benchmarkComponent(Component,\r\n                                   setStatus: (data: BenchmarkData) => void,\r\n                                   numberOfComponents: number,\r\n                                   callback: () => void) {\r\n    const renderDiv = document.createElement(\"div\");\r\n    const before = performance.now();\r\n    let totalNodeCount = 0;\r\n    const clientIds = new Map();\r\n    for (let count = 1; count <= numberOfComponents; count++) {\r\n      const result = await new Promise<BenchmarkData>((resolve) => {\r\n        setTimeout(() => {\r\n          const elem = React.createElement(Component, { data }, null);\r\n          const renderedElem: any = ReactDOM.render(elem, renderDiv);\r\n          clientIds.set(renderedElem.clientId, {});\r\n          totalNodeCount += renderedElem.state.tree.size;\r\n          ReactDOM.unmountComponentAtNode(renderDiv);\r\n          resolve({ count, totalMs: Math.floor(performance.now() - before - 1), totalNodeCount, clientIds });\r\n        }, 1);\r\n      });\r\n      if (count % 20 === 0) {\r\n        setStatus(result);\r\n      }\r\n    }\r\n    if (callback) { callback(); }\r\n  }\r\n\r\n  private benchmark(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    this.setState({\r\n      benchmarking: true,\r\n      timeDevelop: new BenchmarkData(),\r\n      timeDevelopTemp: new BenchmarkData()\r\n    },\r\n      () => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(\"Fetching json with length \" + data.length);\r\n        const numberOfComponents = 200;\r\n        this.benchmarkComponent(DropdownTreeSelect,\r\n          (d1) => this.setState({ timeDevelopTemp: d1 }), numberOfComponents, () =>\r\n            this.benchmarkComponent(DropdownTreeSelect117,\r\n              (d2) => this.setState({ timeDevelop: d2 }), numberOfComponents, () => {\r\n                this.setState({ benchmarking: false });\r\n              }));\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { TreeNode, TreeNodeProps } from \"react-dropdown-tree-select\";\r\n\r\nimport bigData from \"./big-data.json\";\r\nimport data from \"./data.json\";\r\n\r\nexport interface DropdownTestSectionProps {\r\n  Type: any;\r\n  target: string;\r\n  header: string;\r\n  description?: string;\r\n  dummyA?: TreeNodeProps;\r\n  dummyB?: TreeNodeProps;\r\n  onChange?: (currentNode: TreeNode, selectedNodes: TreeNode[]) => void;\r\n  onAction?: any;\r\n  onNodeToggle?: (currentNode: TreeNode) => void;\r\n  show?: boolean;\r\n  hideDefaultCheckboxes?: boolean;\r\n  [property: string]: any;\r\n}\r\n\r\nexport const DropdownTestSection: React.FunctionComponent<DropdownTestSectionProps> = (props) => {\r\n  const [ show, setShow ] = React.useState<boolean>(props.show || false);\r\n  const { Type, target, header, description, dummyA, dummyB, children, hideDefaultCheckboxes } = props;\r\n\r\n  const dataMulti: TreeNodeProps[] = [ bigData ];\r\n  const dataSingle: TreeNodeProps[] = JSON.parse(JSON.stringify(data));\r\n  if (dummyA) { dataMulti.push(dummyA); }\r\n  if (dummyB) { dataMulti.push(dummyB); dataSingle.unshift(dummyB); }\r\n  if (dummyA) { dataSingle.unshift(dummyA); }\r\n  const sharedProps = { texts: { label: `#${target}` } };\r\n\r\n  return (<div className={`dropdown-section ${show ? \"visible\" : \"hidden\"}`}>\r\n    <a id={target} href={`#${target}`} onClick={() => setShow(!show)}>{header}</a>\r\n    {description && <p>{description}</p>}\r\n    {show && <div>\r\n        {!hideDefaultCheckboxes && <div className=\"flex-wrap\">\r\n          <Type data={dataMulti} {...sharedProps} {...props} />\r\n          <Type data={dataMulti} radioSelect mode=\"radioSelect\" {...sharedProps} {...props} />\r\n          <Type data={dataSingle} simpleSelect mode=\"simpleSelect\" {...sharedProps} {...props} />\r\n          <Type data={dataSingle} hierarchical mode=\"hierarchical\" {...sharedProps} {...props} />\r\n        </div>}\r\n        {children}\r\n      </div>}\r\n  </div>);\r\n};\r\n","import React from \"react\";\r\n\r\nexport class EventLog extends React.Component<any, { log: JSX.Element[] }> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { log: [] };\r\n        this.clearLog = this.clearLog.bind(this);\r\n    }\r\n\r\n    public addToLog(message: JSX.Element): void {\r\n      this.setState((prevState) => ({ log: [ message ].concat(prevState.log) }));\r\n    }\r\n\r\n    public render() {\r\n        const { log: eventLog } = this.state;\r\n        if (!eventLog || eventLog.length === 0) { return null; }\r\n        return (<>\r\n            <button className=\"button\" onClick={this.clearLog}>Clear action log</button>\r\n            {eventLog.map((item, i) => <div key={i} className=\"message\">{item}</div>)}\r\n        </>);\r\n    }\r\n\r\n    private clearLog(): void {\r\n      this.setState({ log: [] });\r\n    }\r\n}\r\n","import CircularJSON from \"circular-json\";\r\nimport prettyPrint from \"json-pretty-html\";\r\nimport React from \"react\";\r\nimport DropdownTreeSelect, { NodeAction, TreeNode } from \"react-dropdown-tree-select\";\r\nimport DropdownTreeSelect104 from \"react-dropdown-tree-select@1.0.4\";\r\nimport DropdownTreeSelect117 from \"react-dropdown-tree-select@1.17.0\";\r\n\r\nconst versionMap = [\r\n  { label: \"Develop Temp\", value: \"DevelopTemp\", type: DropdownTreeSelect },\r\n  { label: \"v1.04\", value: \"v104\", type: DropdownTreeSelect104 },\r\n  { label: \"v1.17\", value: \"v117\", type: DropdownTreeSelect117 }\r\n];\r\n\r\nimport \"react-dropdown-tree-select/dist/styles.css\";\r\nimport \"./App.scss\";\r\nimport BenchmarkRender from \"./BenchmarkRender\";\r\nimport { DropdownTestSection } from \"./DropdownTestSection\";\r\nimport { EventLog } from \"./EventLog\";\r\n\r\nconst App: React.FunctionComponent = (props) => {\r\n  let activeVersionOnLoad = versionMap[0].value;\r\n  let activeOnLoad = \"\";\r\n  if (typeof window !== undefined && window.location.hash) {\r\n    const match = /^#(\\w+)-(\\w+)$/.exec(window.location.hash);\r\n    if (match) {\r\n      activeVersionOnLoad = match[1];\r\n      activeOnLoad = match[2];\r\n    }\r\n  }\r\n\r\n  const [ componentType, setComponentType ] = React.useState(activeVersionOnLoad);\r\n\r\n  const dummyA = { label: \"I am groot\", value: \"groot\" };\r\n  const dummyB = { label: \"I'm batman\", value: \"batman\" };\r\n  const defaultDummyA = { ...dummyA, isDefaultValue: true };\r\n  const defaultDummyB = { ...dummyB, isDefaultValue: true };\r\n  const checkedDummyA = { ...dummyA, checked: true };\r\n  const checkedDummyB = { ...dummyB, checked: true };\r\n\r\n  const eventLogRef = React.createRef<EventLog>();\r\n\r\n  const addToLog = (eventName: string, eventData: any) =>\r\n    eventLogRef.current &&  eventLogRef.current.addToLog(\r\n      <>\r\n        <strong>{eventName}</strong>:\r\n        <div className=\"json\" dangerouslySetInnerHTML={\r\n          { __html: prettyPrint(JSON.parse(CircularJSON.stringify(eventData))) }} />\r\n      </>);\r\n  const onChange = (currentNode: TreeNode, selectedNodes: TreeNode[]) =>\r\n    addToLog(\"onChange\", { currentNode, selectedNodes });\r\n  const onAction = (action: NodeAction, node: TreeNode) =>\r\n    addToLog(\"onAction\", { action, node });\r\n  const onNodeToggle = (currentNode: TreeNode) =>\r\n    addToLog(\"onNodeToggle\", currentNode);\r\n  const onLocalAction =  (action: NodeAction, node: TreeNode) => {\r\n    addToLog(\"local onAction\", { action, node });\r\n  };\r\n  const changeComponentType = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setComponentType(event.target.value);\r\n  };\r\n\r\n  const actions = [\r\n    {  title: \"global\", className: \"fa fa-globe\", customAction: true },\r\n    {  title: \"localNode\", className: \"fa fa-map-marker\", onAction: onLocalAction },\r\n  ];\r\n\r\n  const actionsDummyA = { ...dummyA, actions, grootNode: true };\r\n  const actionsDummyB = { ...dummyB, actions, batmanNode: true };\r\n  const { type: Type, value } = versionMap.find((v) => v.value === componentType) || versionMap[0];\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n\r\n      <label htmlFor=\"componentType\">Component type: </label>\r\n      <select className=\"select\" value={componentType} onChange={changeComponentType} id=\"componentType\">\r\n        {versionMap.map((v) => <option key={v.value} value={v.value}>{v.label}</option>)}\r\n      </select>\r\n\r\n      <DropdownTestSection Type={Type} header=\"With no checked/default values\"\r\n        target={`${value}-nocheckeddefault`} show={activeOnLoad === \"nocheckeddefault\"} />\r\n\r\n      <DropdownTestSection Type={Type} header=\"With default values\" description=\"Groot default, Batman default\"\r\n        dummyA={defaultDummyA} dummyB={defaultDummyB}\r\n        target={`${value}-default`}  show={activeOnLoad === \"default\"} />\r\n\r\n      <DropdownTestSection Type={Type} header=\"With checked values\" description=\"Groot checked, Batman checked\"\r\n        dummyA={checkedDummyA} dummyB={checkedDummyB}\r\n        target={`${value}-checked`} show={activeOnLoad === \"checked\"} />\r\n\r\n      <DropdownTestSection Type={Type} header=\"With checked/default values\" description=\"Groot default, Batman checked\"\r\n        dummyA={defaultDummyA} dummyB={checkedDummyB}\r\n        target={`${value}-checkeddefault`} show={activeOnLoad === \"checkeddefault\"} />\r\n\r\n      <DropdownTestSection Type={Type} header=\"With custom level style\" description=\"Calc padding from aria-level\"\r\n        className=\"customlevelstyle\"\r\n        target={`${value}-customlevelstyle`} show={activeOnLoad === \"customlevelstyle\"} />\r\n\r\n      <DropdownTestSection Type={Type} header=\"With events (onAction, onChange, onNodeToggle)\"\r\n        dummyA={actionsDummyA} dummyB={actionsDummyB} onChange={onChange} onAction={onAction}\r\n        onNodeToggle={onNodeToggle} target={`${value}-onaction`} show={activeOnLoad === \"onaction\"}>\r\n        <div className=\"dropdown-section\">\r\n          <label htmlFor=\"onlylocal\">Only local onAction (only 1.0.4 and earlier?)</label>\r\n          <Type data={[ actionsDummyA, actionsDummyB ]} id=\"onlylocal\" simpleSelect\r\n            onChange={onChange} onNodeToggle={onNodeToggle} />\r\n        </div>\r\n        <EventLog ref={eventLogRef} />\r\n      </DropdownTestSection>\r\n\r\n      <BenchmarkRender />\r\n    </div>);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"es6-shim\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
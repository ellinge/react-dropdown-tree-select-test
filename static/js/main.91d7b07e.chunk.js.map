{"version":3,"sources":["BenchmarkRender.tsx","EventLog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BenchmarkData","count","totalNodeCount","totalMs","clientIds","Map","BenchmarkRender","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","benchmarking","timeDevelop","timeDevelopTemp","benchmark","bind","assertThisInitialized","benchmarkComponent","benchMark","branch","react_default","a","createElement","className","size","_this$state","renderBenchmarkData","onClick","disabled","Component","setStatus","numberOfComponents","callback","renderDiv","document","before","performance","now","Promise","resolve","setTimeout","elem","React","data","renderedElem","ReactDOM","render","set","clientId","tree","unmountComponentAtNode","Math","floor","result","event","_this2","setState","console","log","length","DropdownTreeSelect","d1","DropdownTreeSelect116","d2","EventLog","_React$Component","clearLog","inherits","createClass","key","value","message","prevState","concat","eventLog","Fragment","map","item","i","DropDownTestSection","_React$useState","useState","show","_React$useState2","slicedToArray","setShow","Type","header","description","dummyA","dummyB","onChange","onAction","onNodeToggle","children","dataMulti","bigData","dataSingle","JSON","parse","stringify","push","unshift","href","radioSelect","simpleSelect","App","_React$useState3","_React$useState4","componentType","setComponentType","label","defaultDummyA","objectSpread","isDefaultValue","defaultDummyB","checkedDummyA","checked","checkedDummyB","eventLogRef","createRef","addToLog","eventName","eventData","current","dangerouslySetInnerHTML","__html","prettyPrint","CircularJSON","actions","title","customAction","action","node","actionsDummyA","grootNode","actionsDummyB","batmanNode","rel","htmlFor","target","id","App_DropDownTestSection","currentNode","selectedNodes","EventLog_EventLog","ref","BenchmarkRender_BenchmarkRender","Boolean","window","location","hostname","match","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91d7b07e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\r\nimport DropdownTreeSelect116 from \"react-dropdown-tree-select@1.16.0\";\r\nimport data from \"./data.json\";\r\n\r\nclass BenchmarkData {\r\n  public count: number = 0;\r\n  public totalNodeCount: number = 0;\r\n  public totalMs: number = 0;\r\n  public clientIds = new Map();\r\n}\r\n\r\ninterface BenchmarkState {\r\n  benchmarking: boolean;\r\n  timeDevelop: BenchmarkData;\r\n  timeDevelopTemp: BenchmarkData;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport default class BenchmarkRender extends React.Component<any, BenchmarkState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      benchmarking: false,\r\n      timeDevelop: new BenchmarkData(),\r\n      timeDevelopTemp: new BenchmarkData()\r\n    };\r\n    this.benchmark = this.benchmark.bind(this);\r\n    this.benchmarkComponent = this.benchmarkComponent.bind(this);\r\n  }\r\n\r\n  private renderBenchmarkData(benchMark: BenchmarkData, branch: string) {\r\n    if(!benchMark || benchMark.count == 0) return null;\r\n    return <p className=\"message\">\r\n        Rendering <strong>{benchMark.count}</strong> DropdownTreeSelect ({branch}) took\r\n        <strong> {benchMark.totalMs} ms </strong>\r\n        (total nodes parsed: {benchMark.totalNodeCount}, total clientids generated: {benchMark.clientIds.size})\r\n      </p>;\r\n  }\r\n\r\n  public render() {\r\n    const { benchmarking, timeDevelop, timeDevelopTemp } = this.state;\r\n    return <div>\r\n      {this.renderBenchmarkData(timeDevelopTemp, \"developTemp\")}\r\n      {this.renderBenchmarkData(timeDevelop, \"develop\")}\r\n      <button className=\"button\" onClick={this.benchmark} disabled={benchmarking}>{benchmarking ? 'Running...' : 'Run benchmark'}</button>\r\n    </div>;\r\n  }\r\n\r\n  private async benchmarkComponent(Component,\r\n                                   setStatus: (data: BenchmarkData) => void,\r\n                                   numberOfComponents: number,\r\n                                   callback: () => void) {\r\n    const renderDiv = document.createElement(\"div\");\r\n    const before = performance.now();\r\n    let totalNodeCount = 0;\r\n    let clientIds = new Map();\r\n    for (let count = 1; count <= numberOfComponents; count++) {\r\n      const result = await new Promise<BenchmarkData>((resolve) => {\r\n        setTimeout(() => {\r\n          const elem = React.createElement(Component, { data }, null);\r\n          const renderedElem: any = ReactDOM.render(elem, renderDiv);\r\n          clientIds.set(renderedElem.clientId, {});\r\n          totalNodeCount += renderedElem.state.tree.size;\r\n          ReactDOM.unmountComponentAtNode(renderDiv);\r\n          resolve({ count, totalMs: Math.floor(performance.now() - before - 1), totalNodeCount, clientIds });\r\n        }, 1);\r\n      });\r\n      if (count % 20 === 0) {\r\n        setStatus(result);\r\n      }\r\n    }\r\n    if (callback) { callback(); }\r\n  }\r\n\r\n  private benchmark(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    this.setState({\r\n      benchmarking: true,\r\n      timeDevelop: new BenchmarkData(),\r\n      timeDevelopTemp: new BenchmarkData()\r\n    },\r\n      () => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(\"Fetching json with length \" + data.length);\r\n        const numberOfComponents = 200;\r\n        this.benchmarkComponent(DropdownTreeSelect,\r\n          (d1) => this.setState({ timeDevelopTemp: d1 }), numberOfComponents, () =>\r\n            this.benchmarkComponent(DropdownTreeSelect116,\r\n              (d2) => this.setState({ timeDevelop: d2 }), numberOfComponents, () => {\r\n                this.setState({ benchmarking: false });\r\n              }));\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class EventLog extends React.Component<any, { log: JSX.Element[] }> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { log: [] };\r\n        this.clearLog = this.clearLog.bind(this);\r\n    }\r\n\r\n    public addToLog(message: JSX.Element): void {\r\n      this.setState((prevState) => ({ log: [ message ].concat(prevState.log) }));\r\n    }\r\n\r\n    private clearLog(): void {\r\n      this.setState({ log: [] });\r\n    }\r\n\r\n    public render() {\r\n        const { log: eventLog } = this.state;\r\n        if (!eventLog || eventLog.length === 0) { return null; }\r\n        return (<>\r\n            <button className=\"button\" onClick={this.clearLog}>Clear action log</button>\r\n            {eventLog.map((item, i) => <div key={i} className=\"message\">{item}</div>)}\r\n        </>);\r\n    }\r\n}\r\n","import CircularJSON from \"circular-json\";\r\nimport prettyPrint from \"json-pretty-html\";\r\nimport React from \"react\";\r\nimport DropdownTreeSelect, { TreeNode, TreeNodeProps } from \"react-dropdown-tree-select\";\r\nimport DropdownTreeSelect116 from \"react-dropdown-tree-select@1.16.0\";\r\n\r\nimport \"react-dropdown-tree-select/dist/styles.css\";\r\nimport \"./App.scss\";\r\nimport BenchmarkRender from \"./BenchmarkRender\";\r\nimport bigData from \"./big-data.json\";\r\nimport data from \"./data.json\";\r\nimport { EventLog } from \"./EventLog\";\r\n\r\ninterface DropDownTestSectionProps {\r\n  Type: any;\r\n  header: string;\r\n  description?: string;\r\n  dummyA?: TreeNodeProps;\r\n  dummyB?: TreeNodeProps;\r\n  onChange?: (currentNode: TreeNode, selectedNodes: TreeNode[]) => void;\r\n  onAction?: any;\r\n  onNodeToggle?: (currentNode: TreeNode) => void;\r\n  show?: boolean;\r\n}\r\n\r\nconst DropDownTestSection: React.FunctionComponent<DropDownTestSectionProps> = (props) => {\r\n  const [ show, setShow ] = React.useState<boolean>(props.show || false);\r\n  const { Type, header, description, dummyA, dummyB, onChange, onAction, onNodeToggle, children } = props;\r\n\r\n  const dataMulti: TreeNodeProps[] = [ bigData ];\r\n  const dataSingle: TreeNodeProps[] = JSON.parse(JSON.stringify(data));\r\n  if (dummyA) { dataMulti.push(dummyA); }\r\n  if (dummyB) { dataMulti.push(dummyB); dataSingle.unshift(dummyB); }\r\n  if (dummyA) { dataSingle.unshift(dummyA); }\r\n\r\n  return (<div className={`dropdown-section ${show ? \"visible\" : \"hidden\"}`}>\r\n    <a href=\"javascript:void(0)\" onClick={() => setShow(!show)}>{header}</a>\r\n    {description && <p>{description}</p>}\r\n    {show && <div>\r\n        <div className=\"flex-wrap\">\r\n          <Type data={dataMulti} onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle} />\r\n          <Type data={dataMulti} radioSelect onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle} />\r\n          <Type data={dataSingle} simpleSelect onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle} />\r\n        </div>\r\n        {children}\r\n      </div>}\r\n  </div>);\r\n};\r\n\r\nconst App: React.FunctionComponent = (props) => {\r\n  const [ componentType, setComponentType ] = React.useState(\"DropdownTreeSelect\");\r\n\r\n  const dummyA = { label: \"I am groot\", value: \"groot\" };\r\n  const dummyB = { label: \"I'm batman\", value: \"batman\" };\r\n  const defaultDummyA = { ...dummyA, isDefaultValue: true };\r\n  const defaultDummyB = { ...dummyB, isDefaultValue: true };\r\n  const checkedDummyA = { ...dummyA, checked: true };\r\n  const checkedDummyB = { ...dummyB, checked: true };\r\n\r\n  const eventLogRef = React.createRef<EventLog>();\r\n\r\n  const addToLog = (eventName: string, eventData: any) =>\r\n    eventLogRef.current &&  eventLogRef.current.addToLog(\r\n      <>\r\n        <strong>{eventName}</strong>:\r\n        <div className=\"json\" dangerouslySetInnerHTML={\r\n          { __html: prettyPrint(JSON.parse(CircularJSON.stringify(eventData))) }} />\r\n      </>);\r\n  const onChange = (currentNode: TreeNode, selectedNodes: TreeNode[]) =>\r\n    addToLog(\"onChange\", { currentNode, selectedNodes });\r\n  const onAction = (action: any, node: any) =>\r\n    addToLog(\"onAction\", { action: action || null, node: node || null });\r\n  const onNodeToggle = (currentNode: TreeNode) =>\r\n    addToLog(\"onNodeToggle\", currentNode);\r\n  const onLocalAction =  (action: any, node: any) =>\r\n    addToLog(\"local onAction\", { action: action || null, node: node || null });\r\n  const changeComponentType = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setComponentType(event.target.value);\r\n  };\r\n\r\n  const actions = [\r\n    {  title: \"global\", className: \"fa fa-globe\", customAction: true },\r\n    {  title: \"localNode\", className: \"fa fa-map-marker\", onAction: onLocalAction },\r\n  ];\r\n\r\n  const actionsDummyA = { ...dummyA, actions, grootNode: true };\r\n  const actionsDummyB = { ...dummyB, actions, batmanNode: true };\r\n  const Type = componentType === \"DropdownTreeSelect116\" ? DropdownTreeSelect116 : DropdownTreeSelect;\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n\r\n      <label htmlFor=\"componentType\">Component type: </label>\r\n      <select className=\"select\" value={componentType} onChange={changeComponentType} id=\"componentType\">\r\n        <option value=\"DropdownTreeSelect\">DevelopTemp (ellinge)</option>\r\n        <option value=\"DropdownTreeSelect116\">Develop (dowjones)</option>\r\n      </select>\r\n\r\n      <DropDownTestSection Type={Type} header=\"With no checked/default values\" />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With default values\" description=\"Groot default, Batman default\"\r\n        dummyA={defaultDummyA} dummyB={defaultDummyB} />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With checked values\" description=\"Groot checked, Batman checked\"\r\n        dummyA={checkedDummyA} dummyB={checkedDummyB} />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With checked/default values\" description=\"Groot default, Batman checked\"\r\n        dummyA={defaultDummyA} dummyB={checkedDummyB} />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With events (onAction, onChange, onNodeToggle)\"\r\n        dummyA={actionsDummyA} dummyB={actionsDummyB} show\r\n        onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle}>\r\n        <EventLog ref={eventLogRef} />\r\n      </DropDownTestSection>\r\n\r\n      <BenchmarkRender />\r\n    </div>);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"es6-shim\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
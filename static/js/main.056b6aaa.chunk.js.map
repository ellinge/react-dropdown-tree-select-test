{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","actionLog","setActionLog","addToActionLog","message","concat","addToActionLogMultiParam","action","node","JSON","stringify","addToActionLogSingleObject","_ref","dummyA","label","value","dummyB","actions","title","className","onAction","defaultDummyA","objectSpread","isDefaultValue","defaultDummyB","checkedDummyA","checked","checkedDummyB","actionsDummyA","actionsDummyB","react_default","a","createElement","href","rel","react_dropdown_tree_select_default","data","bigData","radioSelect","simpleSelect","length","map","al","i","key","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.056b6aaa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\r\n\r\nimport \"react-dropdown-tree-select/dist/styles.css\";\r\nimport \"./App.scss\";\r\nimport bigData from \"./big-data.json\";\r\nimport data from \"./data.json\";\r\n\r\nconst App: React.FunctionComponent = (props) => {\r\n  const [actionLog, setActionLog] = React.useState<string[]>([]);\r\n\r\n  function clearActionLog(): void {\r\n    setActionLog([]);\r\n  }\r\n\r\n  function addToActionLog(message: string): void {\r\n    setActionLog(actionLog.concat([ message ]));\r\n  }\r\n\r\n  function addToActionLogMultiParam(action, node): void {\r\n    addToActionLog(\"Declaration (action, node) gave action:\" +\r\n      `${JSON.stringify(action)}, node: ${JSON.stringify(node)}`);\r\n  }\r\n\r\n  function addToActionLogSingleObject({ action, node }): void {\r\n    addToActionLog(\"Declaration ({ action, node }) gave action:\" +\r\n      `${JSON.stringify(action)}, node: ${JSON.stringify(node)}`);\r\n  }\r\n\r\n  const dummyA = { label: \"I am groot\", value: \"groot\" };\r\n  const dummyB = { label: \"I'm batman\", value: \"batman\" };\r\n  const actions = [\r\n    {  title: \"global\", className: \"fa fa-globe\" },\r\n    {  title: \"(action, node)\", className: \"fa fa-copy\", onAction: addToActionLogMultiParam },\r\n    {  title: \"{ action, node }\", className: \"fa fa-file-o\", onAction: addToActionLogSingleObject },\r\n  ];\r\n  const defaultDummyA = { ...dummyA, isDefaultValue: true };\r\n  const defaultDummyB =  { ...dummyB, isDefaultValue: true };\r\n  const checkedDummyA = { ...dummyA, checked: true };\r\n  const checkedDummyB =  { ...dummyB, checked: true };\r\n  const actionsDummyA = { ...dummyA, actions };\r\n  const actionsDummyB =  { ...dummyB, actions };\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n      <h2>With no checked/default values</h2>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={bigData} />\r\n        <DropdownTreeSelect data={bigData} />\r\n        <DropdownTreeSelect data={data} />\r\n      </div>\r\n      <h2>With default values</h2>\r\n      <p>Groot default, Batman default</p>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={[ bigData, defaultDummyA, defaultDummyB ]} />\r\n        <DropdownTreeSelect data={[ bigData, defaultDummyA, defaultDummyB ]} radioSelect />\r\n        <DropdownTreeSelect data={[ defaultDummyA, defaultDummyB ].concat(data)} simpleSelect />\r\n      </div>\r\n      <h2>With checked values</h2>\r\n      <p>Groot checked, Batman checked</p>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={[ bigData, checkedDummyA, checkedDummyB ]} />\r\n        <DropdownTreeSelect data={[ bigData, checkedDummyA, checkedDummyB ]} radioSelect />\r\n        <DropdownTreeSelect data={[ checkedDummyA, checkedDummyB ].concat(data)} simpleSelect />\r\n      </div>\r\n      <h2>With checked/default values</h2>\r\n      <p>Groot default, Batman checked</p>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={[ bigData, defaultDummyA, checkedDummyB ]} />\r\n        <DropdownTreeSelect data={[ bigData, defaultDummyA, checkedDummyB ]} radioSelect />\r\n        <DropdownTreeSelect data={[ defaultDummyA, checkedDummyB ].concat(data)} simpleSelect />\r\n      </div>\r\n      <h2>With action values</h2>\r\n      <p>No global onAction, Global onAction (action, node), Global onAction {\"({ action, node })\"}</p>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={[ bigData, actionsDummyA, actionsDummyB ]} />\r\n        <DropdownTreeSelect data={[ bigData, actionsDummyA, actionsDummyB ]} onAction={addToActionLogMultiParam} />\r\n        <DropdownTreeSelect data={[ bigData, actionsDummyA, actionsDummyB ]} onAction={addToActionLogSingleObject} />\r\n      </div>\r\n      {actionLog && actionLog.length > 0 && <div>\r\n        {actionLog.map((al, i) => <p key={i}>{al}</p>)}\r\n        <button onClick={clearActionLog}>Clear action log</button></div>}\r\n    </div>);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"es6-shim\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
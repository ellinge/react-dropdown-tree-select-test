{"version":3,"sources":["EventLog.tsx","BenchmarkRender.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EventLog","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","log","clearLog","bind","assertThisInitialized","inherits","createClass","key","value","message","setState","prevState","concat","eventLog","length","react_default","a","createElement","Fragment","className","onClick","map","item","i","React","Component","BenchmarkData","count","totalNodeCount","totalMs","clientIds","Map","BenchmarkRender","benchmarking","timeDevelop","timeDevelopTemp","benchmark","benchmarkComponent","benchMark","branch","size","_this$state","renderBenchmarkData","disabled","setStatus","numberOfComponents","callback","renderDiv","document","before","performance","now","Promise","resolve","setTimeout","elem","data","renderedElem","ReactDOM","render","set","clientId","tree","unmountComponentAtNode","Math","floor","result","event","_this2","console","DropdownTreeSelect","d1","DropdownTreeSelect116","d2","DropDownTestSection","_React$useState","useState","show","_React$useState2","slicedToArray","setShow","Type","header","description","dummyA","dummyB","onChange","onAction","onNodeToggle","children","dataMulti","bigData","dataSingle","JSON","parse","stringify","push","unshift","href","radioSelect","simpleSelect","App","_React$useState3","_React$useState4","componentType","setComponentType","label","defaultDummyA","objectSpread","isDefaultValue","defaultDummyB","checkedDummyA","checked","checkedDummyB","eventLogRef","createRef","addToLog","eventName","current","dangerouslySetInnerHTML","__html","prettyPrint","CircularJSON","actions","title","customAction","action","node","actionsDummyA","grootNode","actionsDummyB","batmanNode","rel","htmlFor","target","id","App_DropDownTestSection","currentNode","selectedNodes","EventLog_EventLog","ref","BenchmarkRender_BenchmarkRender","Boolean","window","location","hostname","match","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ef04909.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class EventLog extends React.Component<any, { log: JSX.Element[] }> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { log: [] };\r\n        this.clearLog = this.clearLog.bind(this);\r\n    }\r\n\r\n    public addToLog(message: JSX.Element): void {\r\n      this.setState((prevState) => ({ log: [ message ].concat(prevState.log) }));\r\n    }\r\n\r\n    private clearLog(): void {\r\n      this.setState({ log: [] });\r\n    }\r\n\r\n    public render() {\r\n        const { log: eventLog } = this.state;\r\n        if (!eventLog || eventLog.length === 0) { return null; }\r\n        return (<>\r\n            <button className=\"button\" onClick={this.clearLog}>Clear action log</button>\r\n            {eventLog.map((item, i) => <div key={i} className=\"message\">{item}</div>)}\r\n        </>);\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\r\nimport DropdownTreeSelect116 from \"react-dropdown-tree-select@1.16.0\";\r\nimport data from \"./data.json\";\r\n\r\nclass BenchmarkData {\r\n  public count: number = 0;\r\n  public totalNodeCount: number = 0;\r\n  public totalMs: number = 0;\r\n  public clientIds = new Map();\r\n}\r\n\r\ninterface BenchmarkState {\r\n  benchmarking: boolean;\r\n  timeDevelop: BenchmarkData;\r\n  timeDevelopTemp: BenchmarkData;\r\n}\r\n\r\n// tslint:disable-next-line:max-classes-per-file\r\nexport default class BenchmarkRender extends React.Component<any, BenchmarkState> {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      benchmarking: false,\r\n      timeDevelop: new BenchmarkData(),\r\n      timeDevelopTemp: new BenchmarkData()\r\n    };\r\n    this.benchmark = this.benchmark.bind(this);\r\n    this.benchmarkComponent = this.benchmarkComponent.bind(this);\r\n  }\r\n\r\n  private renderBenchmarkData(benchMark: BenchmarkData, branch: string) {\r\n    if(!benchMark || benchMark.count == 0) return null;\r\n    return <p className=\"message\">\r\n        Rendering <strong>{benchMark.count}</strong> DropdownTreeSelect ({branch}) took\r\n        <strong> {benchMark.totalMs} ms </strong>\r\n        (total nodes parsed: {benchMark.totalNodeCount}, total clientids generated: {benchMark.clientIds.size})\r\n      </p>;\r\n  }\r\n\r\n  public render() {\r\n    const { benchmarking, timeDevelop, timeDevelopTemp } = this.state;\r\n    return <div>\r\n      {this.renderBenchmarkData(timeDevelopTemp, \"developTemp\")}\r\n      {this.renderBenchmarkData(timeDevelop, \"develop\")}\r\n      <button className=\"button\" onClick={this.benchmark} disabled={benchmarking}>{benchmarking ? 'Running...' : 'Run benchmark'}</button>\r\n    </div>;\r\n  }\r\n\r\n  private async benchmarkComponent(Component,\r\n                                   setStatus: (data: BenchmarkData) => void,\r\n                                   numberOfComponents: number,\r\n                                   callback: () => void) {\r\n    const renderDiv = document.createElement(\"div\");\r\n    const before = performance.now();\r\n    let totalNodeCount = 0;\r\n    let clientIds = new Map();\r\n    for (let count = 1; count <= numberOfComponents; count++) {\r\n      const result = await new Promise<BenchmarkData>((resolve) => {\r\n        setTimeout(() => {\r\n          const elem = React.createElement(Component, { data }, null);\r\n          const renderedElem: any = ReactDOM.render(elem, renderDiv);\r\n          clientIds.set(renderedElem.clientId, {});\r\n          totalNodeCount += renderedElem.state.tree.size;\r\n          ReactDOM.unmountComponentAtNode(renderDiv);\r\n          resolve({ count, totalMs: Math.floor(performance.now() - before - 1), totalNodeCount, clientIds });\r\n        }, 1);\r\n      });\r\n      if (count % 20 === 0) {\r\n        setStatus(result);\r\n      }\r\n    }\r\n    if (callback) { callback(); }\r\n  }\r\n\r\n  private benchmark(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\r\n    this.setState({\r\n      benchmarking: true,\r\n      timeDevelop: new BenchmarkData(),\r\n      timeDevelopTemp: new BenchmarkData()\r\n    },\r\n      () => {\r\n        // tslint:disable-next-line:no-console\r\n        console.log(\"Fetching json with length \" + data.length);\r\n        const numberOfComponents = 200;\r\n        this.benchmarkComponent(DropdownTreeSelect,\r\n          (d1) => this.setState({ timeDevelopTemp: d1 }), numberOfComponents, () =>\r\n            this.benchmarkComponent(DropdownTreeSelect116,\r\n              (d2) => this.setState({ timeDevelop: d2 }), numberOfComponents, () => {\r\n                this.setState({ benchmarking: false });\r\n              }));\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport DropdownTreeSelect, { TreeNodeProps, TreeNode } from \"react-dropdown-tree-select\";\r\nimport DropdownTreeSelect116 from \"react-dropdown-tree-select@1.16.0\";\r\nimport prettyPrint from \"json-pretty-html\";\r\nimport CircularJSON from 'circular-json';\r\n\r\nimport \"react-dropdown-tree-select/dist/styles.css\";\r\nimport { EventLog } from \"./EventLog\";\r\nimport \"./App.scss\";\r\nimport BenchmarkRender from \"./BenchmarkRender\";\r\nimport bigData from \"./big-data.json\";\r\nimport data from \"./data.json\";\r\n\r\ninterface DropDownTestSectionProps {\r\n  Type: any,\r\n  header: string;\r\n  description?: string; \r\n  dummyA?: TreeNodeProps;\r\n  dummyB?: TreeNodeProps;\r\n  onChange?: (currentNode: TreeNode, selectedNodes: TreeNode[]) => void;\r\n  onAction?: any;\r\n  onNodeToggle?: (currentNode: TreeNode) => void;\r\n  show?: boolean;\r\n}\r\n\r\nconst DropDownTestSection: React.FunctionComponent<DropDownTestSectionProps> = (props) => {\r\n  const [ show, setShow ] = React.useState<boolean>(props.show || false)\r\n  const { Type, header, description, dummyA, dummyB, onChange, onAction, onNodeToggle, children } = props;\r\n\r\n  const dataMulti: TreeNodeProps[] = [ bigData ]\r\n  const dataSingle: TreeNodeProps[] = JSON.parse(JSON.stringify(data))\r\n  if (dummyA) { dataMulti.push(dummyA); dataSingle.unshift(dummyA) }\r\n  if (dummyB) { dataMulti.push(dummyB); dataSingle.unshift(dummyB) }\r\n\r\n  return (<div className={`dropdown-section ${show ? \"visible\" : \"hidden\"}`}>\r\n    <a href=\"javascript:void(0)\" onClick={() => setShow(!show)}>{header}</a>\r\n    {description && <p>{description}</p>}\r\n    {show && <div>\r\n        <div className=\"flex-wrap\">\r\n          <Type data={dataMulti} onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle} />\r\n          <Type data={dataMulti} radioSelect onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle} />\r\n          <Type data={dataSingle} simpleSelect onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle} />\r\n        </div>\r\n        {children}\r\n      </div>}\r\n  </div>);\r\n};\r\n\r\nconst App: React.FunctionComponent = (props) => {\r\n  const [ componentType, setComponentType ] = React.useState(\"DropdownTreeSelect\")\r\n\r\n  const dummyA = { label: \"I am groot\", value: \"groot\" };\r\n  const dummyB = { label: \"I'm batman\", value: \"batman\" };\r\n  const defaultDummyA = { ...dummyA, isDefaultValue: true };\r\n  const defaultDummyB = { ...dummyB, isDefaultValue: true };\r\n  const checkedDummyA = { ...dummyA, checked: true };\r\n  const checkedDummyB = { ...dummyB, checked: true };\r\n\r\n  const eventLogRef = React.createRef<EventLog>();\r\n\r\n  const addToLog = (eventName: string, data: any) =>\r\n    eventLogRef.current &&  eventLogRef.current.addToLog(\r\n      <>\r\n        <strong>{eventName}</strong>: \r\n        <div className=\"json\" dangerouslySetInnerHTML={{ __html: prettyPrint(JSON.parse(CircularJSON.stringify(data))) }} />\r\n      </>);\r\n  const onChange = (currentNode: TreeNode, selectedNodes: TreeNode[]) => \r\n    addToLog(\"onChange\", { currentNode, selectedNodes });\r\n  const onAction = (action: any, node: any) => \r\n    addToLog(\"onAction\", { action: action || null, node: node || null });\r\n  const onNodeToggle = (currentNode: TreeNode) => \r\n    addToLog(\"onNodeToggle\", currentNode);\r\n  const onLocalAction =  (action: any, node: any) => \r\n    addToLog(\"local onAction\", { action: action || null, node: node || null });\r\n  const changeComponentType = (event: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setComponentType(event.target.value);\r\n  }\r\n\r\n  const actions = [\r\n    {  title: \"global\", className: \"fa fa-globe\", customAction: true },\r\n    {  title: \"localNode\", className: \"fa fa-map-marker\", onAction: onLocalAction },\r\n  ];\r\n\r\n  const actionsDummyA = { ...dummyA, actions, grootNode: true };\r\n  const actionsDummyB = { ...dummyB, actions, batmanNode: true };\r\n  const Type = componentType === \"DropdownTreeSelect116\" ? DropdownTreeSelect116 : DropdownTreeSelect;\r\n\r\n  return (\r\n    <div className=\"root\">\r\n      <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n\r\n      <label htmlFor=\"componentType\">Component type: </label>\r\n      <select className=\"select\" value={componentType} onChange={changeComponentType} id=\"componentType\">\r\n        <option value=\"DropdownTreeSelect\">DevelopTemp (ellinge)</option>\r\n        <option value=\"DropdownTreeSelect116\">Develop (dowjones)</option>\r\n      </select>\r\n\r\n      <DropDownTestSection Type={Type} header=\"With no checked/default values\" />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With default values\" description=\"Groot default, Batman default\"\r\n        dummyA={defaultDummyA} dummyB={defaultDummyB} />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With checked values\" description=\"Groot checked, Batman checked\"\r\n        dummyA={checkedDummyA} dummyB={checkedDummyB} />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With checked/default values\" description=\"Groot default, Batman checked\"\r\n        dummyA={defaultDummyA} dummyB={checkedDummyB} />\r\n\r\n      <DropDownTestSection Type={Type} header=\"With events (onAction, onChange, onNodeToggle)\"\r\n        dummyA={actionsDummyA} dummyB={actionsDummyB} show\r\n        onChange={onChange} onAction={onAction} onNodeToggle={onNodeToggle}>\r\n        <EventLog ref={eventLogRef} />\r\n      </DropDownTestSection>\r\n\r\n      <BenchmarkRender />\r\n    </div>);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"es6-shim\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["ActionLog.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionLog","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","actionLog","clearActionLog","bind","assertThisInitialized","inherits","createClass","key","value","setState","message","prevState","concat","action","node","addToActionLog","JSON","stringify","_ref","length","react_default","a","createElement","map","al","i","onClick","React","Component","DropDownTestSection","header","description","dummyA","dummyB","className","react_dropdown_tree_select_default","data","bigData","radioSelect","simpleSelect","App","label","defaultDummyA","objectSpread","isDefaultValue","defaultDummyB","checkedDummyA","checked","checkedDummyB","actionLogRef","createRef","addToActionLogMultiParam","current","addToActionLogSingleObject","actions","title","onAction","actionsDummyA","actionsDummyB","href","rel","App_DropDownTestSection","ActionLog_ActionLog","ref","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.da4d51bb.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport class ActionLog extends React.Component<any, { actionLog: string[] }> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { actionLog: [] };\r\n        this.clearActionLog = this.clearActionLog.bind(this);\r\n    }\r\n  \r\n    private clearActionLog(): void {\r\n      this.setState({ actionLog: [] });\r\n    }\r\n  \r\n    private addToActionLog(message: string): void {\r\n      this.setState((prevState) => ({ actionLog: prevState.actionLog.concat([ message ])}));\r\n    }\r\n  \r\n    public addToActionLogMultiParam(action, node): void {\r\n      this.addToActionLog(\"Declaration (action, node) gave action:\" +\r\n        `${JSON.stringify(action)}, node: ${JSON.stringify(node)}`);\r\n    }\r\n  \r\n    public addToActionLogSingleObject({ action, node }): void {\r\n        this.addToActionLog(\"Declaration ({ action, node }) gave action:\" +\r\n        `${JSON.stringify(action)}, node: ${JSON.stringify(node)}`);\r\n    }\r\n\r\n    public render() {\r\n        const { actionLog } = this.state;\r\n        if(!actionLog || actionLog.length == 0) return null;\r\n        return (<div>\r\n            {actionLog.map((al, i) => <p key={i}>{al}</p>)}\r\n            <button onClick={this.clearActionLog}>Clear action log</button>\r\n        </div>);\r\n    }\r\n}","import React from \"react\";\r\nimport DropdownTreeSelect from \"react-dropdown-tree-select\";\r\n\r\nimport \"react-dropdown-tree-select/dist/styles.css\";\r\nimport \"./App.scss\";\r\nimport bigData from \"./big-data.json\";\r\nimport data from \"./data.json\";\r\nimport { ActionLog } from \"./ActionLog\";\r\n\r\nconst DropDownTestSection: React.FunctionComponent<\r\n  { header: string, description?: string, dummyA: any, dummyB: any }> = (props) => {\r\n  const { header, description, dummyA, dummyB } = props;\r\n  return (<div>\r\n    <h2>{header}</h2>\r\n    {description && <p>{description}</p>}\r\n    <div className=\"flex\">\r\n      <DropdownTreeSelect data={[ bigData, dummyA, dummyB ]} />\r\n      <DropdownTreeSelect data={[ bigData, dummyA, dummyB ]} radioSelect />\r\n      <DropdownTreeSelect data={[ dummyA, dummyB ].concat(data)} simpleSelect />\r\n    </div>\r\n  </div>);\r\n}\r\n\r\nconst App: React.FunctionComponent = (props) => {\r\n  const dummyA = { label: \"I am groot\", value: \"groot\" };\r\n  const dummyB = { label: \"I'm batman\", value: \"batman\" };\r\n  const defaultDummyA = { ...dummyA, isDefaultValue: true };\r\n  const defaultDummyB = { ...dummyB, isDefaultValue: true };\r\n  const checkedDummyA = { ...dummyA, checked: true };\r\n  const checkedDummyB = { ...dummyB, checked: true };\r\n\r\n  const actionLogRef = React.createRef<ActionLog>();\r\n  function addToActionLogMultiParam(action, node) {\r\n    if (actionLogRef.current) { actionLogRef.current.addToActionLogMultiParam(action, node); }\r\n  }\r\n  function addToActionLogSingleObject({ action, node }) {\r\n    if (actionLogRef.current) { actionLogRef.current.addToActionLogSingleObject({ action, node }); }\r\n  }\r\n\r\n  const actions = [\r\n    {  title: \"global\", className: \"fa fa-globe\" },\r\n    {  title: \"(action, node)\", className: \"fa fa-copy\", onAction: addToActionLogMultiParam },\r\n    {  title: \"{ action, node }\", className: \"fa fa-file-o\", onAction: addToActionLogSingleObject}\r\n  ];\r\n\r\n  const actionsDummyA = { ...dummyA, actions };\r\n  const actionsDummyB = { ...dummyB, actions };\r\n  \r\n  return (\r\n    <div className=\"root\">\r\n      <link href=\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\" rel=\"stylesheet\" />\r\n      \r\n      <h2>With no checked/default values</h2>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={bigData} />\r\n        <DropdownTreeSelect data={bigData} radioSelect />\r\n        <DropdownTreeSelect data={data} simpleSelect />\r\n      </div>\r\n\r\n      <DropDownTestSection header=\"With default values\" description=\"Groot default, Batman default\"\r\n        dummyA={defaultDummyA} dummyB={defaultDummyB} />\r\n\r\n      <DropDownTestSection header=\"With checked values\" description=\"Groot checked, Batman checked\"\r\n        dummyA={checkedDummyA} dummyB={checkedDummyB} />\r\n\r\n      <DropDownTestSection header=\"With checked/default values\" description=\"Groot default, Batman checked\"\r\n        dummyA={defaultDummyA} dummyB={checkedDummyB} />\r\n\r\n      <h2>With action values</h2>\r\n      <p>No global onAction, Global onAction (action, node), Global onAction {\"({ action, node })\"}</p>\r\n      <div className=\"flex\">\r\n        <DropdownTreeSelect data={[ bigData, actionsDummyA, actionsDummyB ]} />{/*\r\n        // @ts-ignore */}\r\n        <DropdownTreeSelect data={[ bigData, actionsDummyA, actionsDummyB ]} onAction={addToActionLogMultiParam} />{/*\r\n        // @ts-ignore */}\r\n        <DropdownTreeSelect data={[ bigData, actionsDummyA, actionsDummyB ]} onAction={addToActionLogSingleObject} />\r\n      </div>\r\n      <ActionLog ref={actionLogRef} />\r\n    </div>);\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"es6-shim\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}